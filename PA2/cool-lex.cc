#line 2 "cool-lex.cc"

#line 4 "cool-lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

/* %endif */

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 73
#define YY_END_OF_BUFFER 74
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[352] =
    {   0,
        0,    0,    0,    0,    5,    5,    2,    2,   74,   72,
       69,   70,   36,   54,   55,   51,   49,   64,   50,   61,
       52,   48,   60,   53,   63,   67,   62,   66,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   58,
       59,   68,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   56,   72,   57,   65,   71,   47,   38,
       37,   73,    5,    8,    5,    7,    2,    3,   69,    4,
       11,   64,    1,   48,   60,   53,   13,   14,   12,   62,
       66,   34,   34,   34,    0,   34,   34,    0,   17,   17,
       18,   19,   34,   18,   34,   34,    0,   34,   34,    0,

       28,   28,   34,    0,   34,    0,   34,    0,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   17,
       35,   17,   17,   18,   19,   35,   18,   19,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   28,   28,   35,
       35,   35,   35,   35,   35,    0,   35,   35,    0,    0,
       18,    0,    0,   19,    0,    0,   17,   65,   47,   46,
       39,   40,   44,   45,   41,   43,   42,    5,    6,    7,
        9,    7,    2,   34,    0,   34,    0,    0,   34,    0,
       34,    0,    0,   34,    0,   34,    0,    0,   21,   21,
       34,    0,   21,   29,   29,   31,   31,   29,   34,    0,

       34,    0,   34,    0,   35,   35,   35,   35,   35,   35,
       35,   35,   35,    0,   35,   35,   35,   35,   35,   21,
       35,   21,   35,   29,   31,   29,   31,   35,   35,   35,
       35,    0,   35,   35,    0,   35,   35,   21,    0,    0,
        0,   31,    0,    0,    0,   21,   21,   39,   40,    0,
        9,   26,   26,   34,    0,   26,   16,   16,   27,   27,
       16,   34,    0,   34,    0,    0,   22,   22,   23,   23,
       24,   24,   34,    0,   26,   35,   26,   35,   16,   27,
       16,   27,   35,    0,   35,   35,   35,   35,   35,   22,
       22,   23,   23,   24,   32,   32,   24,   32,   24,   35,

       35,   24,   16,   22,   27,   27,   16,   16,   23,   16,
       39,   10,   15,   15,   34,    0,   34,    0,    0,   25,
       25,   15,   15,   33,   33,   33,   35,   35,   35,   35,
       25,   25,   15,   34,    0,   30,   30,   30,   35,   30,
       35,   30,   34,    0,   35,   35,   20,   20,   20,   20,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    5,
        6,    7,    8,    9,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   14,   14,   15,   16,   17,
       18,   19,    1,   20,   21,   22,   23,   24,   25,   26,
       22,   27,   28,   22,   22,   29,   22,   30,   31,   32,
       22,   33,   34,   35,   36,   37,   38,   22,   22,   22,
       39,   40,   41,    1,   42,    1,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   49,   49,   52,   49,   53,
       54,   55,   49,   56,   57,   58,   59,   60,   61,   49,
       49,   49,   62,   63,   64,   65,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[67] =
    {   0,
        1,    1,    2,    3,    1,    1,    4,    1,    1,    1,
        1,    1,    5,    5,    1,    1,    1,    1,    1,    1,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    1,    3,
        1,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[361] =
    {   0,
        0,    0,   64,   66,   68,   69,  341,  340,  334, 1010,
      327, 1010, 1010,  293, 1010,  258, 1010,  250,  243, 1010,
     1010,   64,  217,  209,   69,  203,  200,  196,    0,   59,
       55,   54,   66,   78,   90,   65,   70,   89,   93, 1010,
     1010, 1010,  144,  185,   97,  187,  183,  195,  198,   82,
       96,  191,  194, 1010,  241, 1010,  118, 1010,    0, 1010,
     1010,  263,    0, 1010,  155,   79,    0, 1010,  153, 1010,
     1010,  142, 1010,   80,  133,  124, 1010, 1010, 1010,  117,
       90,    0,  176,  121,  222,  217,  164,  239,    0, 1010,
        0,  236,  218,  260,  255,  252,  270,  100,  268,  274,

        0, 1010,  286,  291,  283,  289,  297,  299,  320,    0,
      325,  340,  350,  365,  353,  368,  357,  369,  363,    0,
      366,    0,  367,    0,  371,  362,    0,  373,  364,  382,
      402,  400,  406,  401,  403,  409,  413,    0,    0,  419,
      420,  421,  416,  430,  431,  453,  429,  457,  447,  460,
     1010,  477,  488,  464,  472,  476,  531,   34,    0, 1010,
       84,  121, 1010, 1010, 1010, 1010, 1010,    0, 1010,  140,
       88,  205,    0,  486,  490,  491,  498,  513,  516,  517,
      527,  548,  550,  552,  558,  553,  555,  573,    0, 1010,
      568,  569,  570,    0, 1010,    0, 1010, 1010,  567,  574,

      504,  576,  583,  588,  597,  600,  603,  604,  617,  620,
      622,  625,  611,  615,  618,  629,  628,  630,  640,    0,
      624,    0,  641,    0,    0,    0,    0,  655,  657,  659,
      670,  672,  660,  674,  681,  673,  679, 1010,  686,  707,
      695,  711,  722,  723,  726, 1010,  767,  221,  325,   84,
     1010,    0, 1010,  714,  718,  721,    0, 1010,    0, 1010,
     1010,  732,  746,  731,  755,  772,    0, 1010,    0, 1010,
        0, 1010,  744,  768,    0,  753,    0,  769,    0,    0,
        0,    0,  786,  792,  800,  771,  785,  796,  809,    0,
        0,    0,    0,    0,    0, 1010,    0,    0, 1010,  815,

      817,  818,  804, 1010,  822,  811, 1010,  813,  819,  858,
      328,   76,    0, 1010,  826,  843,  833,  864,  871,    0,
     1010,    0,    0,    0, 1010,    0,  856,  866,  865,  874,
        0,    0,  880,  867,  878,    0, 1010,  888,  889,    0,
      897,    0,  899,  901,  904,  906,    0, 1010,    0,    0,
     1010,  969,  974,  979,   76,  984,  989,  994,  999, 1004
    } ;

static yyconst flex_int16_t yy_def[361] =
    {   0,
      351,    1,  352,  352,  353,  353,  354,  354,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  351,
      351,  351,  351,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,  351,  351,  351,  351,  351,  356,  351,
      351,  357,  358,  351,  358,  359,  360,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  355,  355,  355,  351,  355,  355,  351,  355,  351,
      355,  355,  355,  351,  355,  355,  351,  355,  355,  351,

      355,  351,  355,  351,  355,  351,  355,  351,   43,   43,
      109,  109,   43,   43,  109,  109,   43,   43,  109,  109,
       43,   43,  351,  109,  109,  109,   43,   43,   43,  109,
      109,   43,   43,  109,  109,   43,   43,  109,   43,  109,
       43,  109,  109,   43,   43,  351,  109,   43,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  356,  351,
      351,  351,  351,  351,  351,  351,  351,  358,  351,  359,
      351,  359,  360,  355,  351,  355,  351,  351,  355,  351,
      355,  351,  351,  355,  351,  355,  351,  351,  355,  351,
      355,  351,  351,  355,  351,  355,  351,  351,  355,  351,

      355,  351,  355,  351,  109,  109,   43,   43,  109,  109,
       43,   43,  109,  351,   43,  109,  109,   43,   43,  109,
      109,   43,   43,  109,  109,   43,   43,  109,   43,  109,
      109,  351,   43,   43,  351,  109,   43,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  355,  351,  355,  351,  351,  355,  351,  355,  351,
      351,  355,  351,  355,  351,  351,  355,  351,  355,  351,
      355,  351,  355,  351,  109,  109,   43,   43,  109,  109,
       43,   43,  109,  351,   43,  109,  109,   43,   43,  109,
       43,  109,   43,  109,  109,  351,   43,   43,  351,  109,

       43,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  355,  351,  355,  351,  355,  351,  351,  355,
      351,  109,   43,  109,  351,   43,  109,  109,   43,   43,
      109,   43,  351,  355,  351,  355,  351,  351,  109,  109,
       43,   43,  355,  351,  109,   43,  355,  351,  109,   43,
        0,  351,  351,  351,  351,  351,  351,  351,  351,  351
    } ;

static yyconst flex_int16_t yy_nxt[1077] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   22,   23,   24,   25,   26,   27,   28,
       29,   29,   30,   29,   31,   32,   29,   33,   34,   35,
       36,   37,   29,   29,   38,   29,   29,   39,   40,   10,
       41,   42,   43,   43,   44,   43,   45,   46,   43,   43,
       47,   48,   49,   50,   51,   43,   43,   52,   43,   43,
       53,   54,   55,   56,   57,   58,   60,   61,   60,   61,
       64,   64,   65,   65,   66,   66,   74,   74,   77,   83,
       82,   89,  250,   86,  171,  172,   78,   84,   87,  312,
      101,   91,   74,   74,  250,   92,  248,  249,  158,   93,

      103,   83,   95,   62,   89,   62,   86,  138,   96,   81,
       84,   87,  101,   91,   98,  105,   90,   88,   92,  107,
       99,   85,   93,  103,   95,  115,  140,  102,   94,  139,
      116,   96,  104,  249,  249,   80,   98,  194,  105,   76,
       97,  176,  107,   99,  102,  351,  351,   75,  117,  141,
       72,  106,  100,  118,   69,  108,  109,  109,  104,   88,
      194,  169,  195,  176,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  158,  177,  181,  109,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,

      110,  110,  110,  110,  110,  111,  181,  119,  124,  174,
      251,  172,  125,  112,  120,   81,  126,  142,   80,  130,
      147,   79,  134,  143,   76,  131,  182,  113,  135,  121,
      127,   75,  174,  311,  249,  128,  114,  122,  175,  129,
      144,  132,  177,  148,  136,   94,  145,   85,  133,  123,
      179,  137,   73,  146,  186,  175,  108,   97,   72,  182,
      100,  149,  184,   71,  177,  150,  151,  152,   90,  153,
      154,  155,  180,  179,  156,  161,  162,  186,  175,  180,
      187,  182,  191,  149,  178,  184,  185,  150,  151,  189,
      152,   90,  153,  154,  155,  180,  187,  156,  185,   70,

      192,  183,  196,  157,  190,  191,  163,  201,  197,  185,
      164,  195,  189,  202,  192,  165,  199,  190,  166,  187,
      167,  200,  188,  192,  203,  196,  204,  190,   69,  201,
      197,  197,  193,  351,  195,  202,  198,  249,  249,  199,
      249,  249,   68,   68,  200,  202,  351,  203,  200,  204,
      351,  202,  351,  200,  351,  351,  351,  351,  205,  204,
      206,  204,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  205,  206,  205,  351,  206,  209,  175,  210,  210,
      209,  213,  351,  351,  213,  214,  351,  216,  217,  216,

      217,  351,  177,  351,  351,  351,  207,  208,  351,  209,
      210,  212,  175,  211,  213,  180,  220,  215,  214,  180,
      216,  217,  218,  219,  187,  214,  187,  177,  214,  214,
      182,  182,  221,  185,  220,  185,  221,  225,  224,  220,
      351,  351,  351,  351,  190,  230,  224,  225,  351,  228,
      228,  231,  351,  351,  230,  221,  236,  222,  351,  223,
      225,  224,  190,  195,  192,  197,  231,  230,  192,  226,
      227,  195,  228,  229,  231,  197,  233,  202,  232,  236,
      175,  200,  200,  202,  236,  351,  351,  351,  232,  234,
      185,  204,  202,  232,  190,  351,  182,  195,  351,  202,

      351,  202,  241,  175,  204,  351,  197,  237,  177,  175,
      252,  232,  187,  185,  253,  235,  351,  190,  182,  204,
      195,  180,  238,  202,  254,  241,  185,  204,  351,  197,
      177,  255,  252,  271,  242,  187,  253,  253,  243,  239,
      257,  258,  351,  351,  180,  351,  255,  254,  253,  259,
      240,  244,  253,  255,  255,  202,  271,  185,  204,  253,
      255,  241,  257,  258,  245,  246,  272,  187,  195,  255,
      260,  259,  260,  244,  258,  256,  262,  202,  258,  258,
      185,  204,  263,  264,  241,  265,  351,  245,  246,  260,
      187,  195,  260,  247,  260,  269,  258,  263,  262,  267,

      268,  268,  270,  265,  263,  272,  264,  351,  265,  351,
      260,  273,  261,  351,  263,  265,  274,  265,  269,  263,
      263,  275,  267,  268,  268,  270,  265,  275,  272,  270,
      268,  268,  268,  276,  273,  266,  270,  276,  272,  274,
      351,  279,  280,  275,  283,  274,  279,  280,  284,  277,
      274,  283,  351,  286,  286,  290,  276,  351,  287,  253,
      278,  351,  255,  279,  280,  253,  255,  283,  281,  282,
      287,  284,  290,  284,  285,  286,  288,  284,  290,  258,
      284,  287,  260,  292,  258,  292,  268,  260,  294,  294,
      265,  263,  263,  289,  295,  291,  296,  351,  295,  351,

      351,  300,  265,  268,  351,  296,  292,  300,  293,  351,
      272,  294,  297,  351,  274,  272,  295,  270,  296,  270,
      298,  272,  272,  270,  300,  351,  268,  296,  351,  351,
      301,  258,  296,  272,  296,  274,  296,  274,  272,  270,
      255,  274,  268,  299,  260,  260,  270,  313,  302,  268,
      307,  314,  265,  258,  314,  351,  255,  304,  317,  351,
      351,  351,  270,  255,  315,  268,  260,  260,  320,  303,
      313,  351,  307,  304,  314,  265,  314,  314,  316,  255,
      314,  317,  318,  314,  305,  306,  322,  315,  307,  260,
      320,  308,  321,  318,  316,  309,  272,  265,  268,  318,

      255,  316,  322,  327,  316,  318,  321,  351,  316,  322,
      324,  260,  328,  308,  321,  314,  325,  318,  309,  272,
      265,  268,  318,  255,  324,  323,  327,  316,  327,  310,
      321,  314,  324,  316,  319,  328,  328,  314,  325,  331,
      351,  331,  321,  321,  314,  316,  326,  318,  325,  318,
      351,  329,  351,  334,  325,  351,  336,  351,  316,  330,
      314,  331,  325,  332,  321,  321,  314,  314,  316,  351,
      335,  318,  318,  314,  351,  316,  334,  321,  336,  321,
      321,  321,  321,  339,  318,  318,  351,  337,  335,  340,
      316,  314,  339,  335,  337,  337,  351,  340,  335,  351,

      351,  343,  351,  337,  321,  335,  339,  335,  318,  337,
      351,  340,  344,  316,  314,  341,  337,  351,  335,  342,
      333,  335,  344,  345,  343,  337,  337,  335,  337,  344,
      335,  345,  347,  338,  348,  344,  337,  349,  351,  349,
      344,  351,  338,  351,  351,  344,  345,  351,  351,  351,
      344,  344,  351,  351,  346,  347,  351,  348,  351,  344,
      349,  348,  350,  348,  351,  351,  348,  351,  348,   59,
       59,   59,   59,   59,   63,   63,   63,   63,   63,   67,
       67,   67,   67,   67,  159,  351,  351,  159,  159,  160,
      160,  160,  160,  160,  168,  351,  168,  351,  168,  170,

      351,  170,  170,  170,  173,  351,  173,  173,  173,    9,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351
    } ;

static yyconst flex_int16_t yy_chk[1077] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    4,    4,
        5,    6,    5,    6,    5,    6,   22,   22,   25,   30,
      355,   32,  312,   31,   66,   66,   25,   30,   31,  250,
       36,   33,   74,   74,  171,   33,  161,  161,  158,   33,

       37,   30,   34,    3,   32,    4,   31,   50,   34,   81,
       30,   31,   36,   33,   35,   38,   32,   31,   33,   39,
       35,   30,   33,   37,   34,   45,   51,   36,   33,   50,
       45,   34,   37,  162,  162,   80,   35,   98,   38,   76,
       34,   84,   39,   35,   50,  170,  170,   75,   45,   51,
       72,   38,   35,   45,   69,   39,   43,   43,   51,   45,
       98,   65,   98,   84,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   57,   84,   87,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   44,   87,   46,   47,   83,
      172,  172,   47,   44,   46,   28,   47,   52,   27,   48,
       53,   26,   49,   52,   24,   48,   87,   44,   49,   46,
       47,   23,   83,  248,  248,   47,   44,   46,   83,   47,
       52,   48,   85,   53,   49,   47,   52,   44,   48,   46,
       86,   49,   19,   52,   93,   85,   53,   48,   18,   88,
       49,   55,   92,   16,   85,   55,   55,   55,   55,   55,
       55,   55,   88,   86,   55,   62,   62,   93,   85,   86,
       93,   88,   96,   55,   85,   92,   94,   55,   55,   95,
       55,   55,   55,   55,   55,   88,   94,   55,   92,   14,

       97,   88,   99,   55,   97,   96,   62,  105,  100,   94,
       62,  100,   95,  106,   96,   62,  103,   95,   62,   94,
       62,  104,   94,   97,  107,   99,  108,   97,   11,  105,
       99,  100,   97,    9,  100,  106,  100,  249,  249,  103,
      311,  311,    8,    7,  104,  105,    0,  107,  103,  108,
        0,  106,    0,  104,    0,    0,    0,    0,  111,  107,
      112,  108,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  111,  112,  113,    0,  114,  115,  111,  116,  118,
      117,  119,    0,    0,  121,  123,    0,  125,  126,  128,

      129,    0,  112,    0,    0,    0,  113,  114,    0,  115,
      116,  118,  113,  117,  119,  115,  130,  121,  123,  117,
      125,  126,  128,  129,  126,  119,  129,  114,  121,  123,
      116,  118,  131,  125,  132,  128,  133,  135,  134,  130,
        0,    0,    0,    0,  130,  142,  136,  137,    0,  140,
      141,  143,    0,    0,  144,  131,  147,  132,    0,  133,
      135,  134,  132,  134,  131,  135,  145,  142,  133,  136,
      137,  136,  140,  141,  143,  137,  144,  146,  143,  147,
      149,  140,  141,  142,  148,    0,    0,    0,  146,  145,
      154,  147,  144,  145,  150,    0,  156,  150,    0,  146,

        0,  152,  155,  149,  152,    0,  155,  148,  153,  149,
      174,  146,  156,  154,  175,  146,    0,  150,  156,  148,
      150,  153,  150,  152,  176,  155,  154,  152,    0,  155,
      153,  177,  174,  201,  155,  156,  175,  178,  156,  152,
      179,  180,    0,    0,  153,    0,  178,  176,  174,  181,
      153,  157,  175,  176,  177,  157,  201,  157,  157,  178,
      177,  157,  179,  180,  157,  157,  201,  157,  157,  178,
      182,  181,  183,  157,  183,  178,  184,  157,  179,  180,
      157,  157,  185,  186,  157,  187,    0,  157,  157,  181,
      157,  157,  182,  157,  183,  199,  183,  188,  184,  191,

      192,  193,  200,  188,  185,  202,  186,    0,  187,    0,
      182,  203,  183,    0,  184,  186,  204,  187,  199,  188,
      185,  205,  191,  192,  193,  200,  188,  207,  202,  199,
      191,  192,  193,  206,  203,  188,  200,  208,  202,  204,
        0,  209,  210,  205,  213,  203,  211,  212,  214,  207,
      204,  215,    0,  216,  218,  221,  206,    0,  217,  205,
      208,    0,  206,  209,  210,  207,  208,  213,  211,  212,
      219,  214,  223,  213,  215,  216,  218,  214,  221,  209,
      215,  217,  210,  228,  211,  229,  221,  212,  230,  233,
      217,  216,  218,  219,  231,  223,  232,    0,  234,    0,

        0,  236,  219,  223,    0,  235,  228,  237,  229,    0,
      235,  230,  233,    0,  239,  239,  231,  228,  232,  229,
      234,  230,  233,  241,  236,    0,  241,  235,    0,    0,
      237,  240,  231,  235,  232,  236,  234,  239,  239,  242,
      240,  237,  242,  235,  243,  244,  241,  254,  239,  241,
      245,  255,  243,  240,  256,    0,  244,  241,  264,    0,
        0,    0,  242,  240,  262,  242,  243,  244,  273,  240,
      254,    0,  245,  242,  255,  243,  254,  256,  263,  244,
      255,  264,  265,  256,  243,  244,  276,  262,  245,  247,
      273,  247,  274,  264,  262,  247,  247,  247,  247,  266,

      247,  263,  278,  286,  266,  265,  273,    0,  263,  276,
      283,  247,  287,  247,  274,  276,  284,  265,  247,  247,
      247,  247,  266,  247,  285,  278,  286,  266,  288,  247,
      274,  278,  283,  286,  266,  287,  289,  303,  284,  300,
        0,  301,  302,  309,  306,  308,  285,  287,  283,  305,
        0,  288,    0,  315,  284,    0,  317,    0,  288,  289,
      303,  300,  285,  301,  302,  309,  303,  306,  308,    0,
      316,  289,  305,  306,    0,  308,  315,  300,  317,  301,
      302,  309,  310,  327,  305,  310,    0,  318,  315,  328,
      310,  310,  329,  316,  319,  317,    0,  330,  319,    0,

        0,  334,    0,  333,  310,  316,  327,  333,  310,  318,
        0,  328,  335,  310,  310,  329,  319,    0,  327,  330,
      310,  319,  338,  339,  334,  333,  318,  329,  328,  334,
      333,  341,  343,  319,  344,  335,  330,  345,    0,  346,
      335,    0,  333,    0,    0,  338,  339,    0,    0,    0,
      338,  339,    0,    0,  341,  343,    0,  344,    0,  341,
      345,  343,  346,  344,    0,    0,  345,    0,  346,  352,
      352,  352,  352,  352,  353,  353,  353,  353,  353,  354,
      354,  354,  354,  354,  356,    0,    0,  356,  356,  357,
      357,  357,  357,  357,  358,    0,  358,    0,  358,  359,

        0,  359,  359,  359,  360,    0,  360,  360,  360,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static yyconst flex_int16_t yy_rule_linenum[73] =
    {   0,
      118,  119,  120,  126,  127,  128,  129,  130,  131,  132,
      134,  143,  144,  145,  150,  151,  152,  153,  154,  155,
      156,  157,  158,  159,  160,  161,  162,  163,  164,  165,
      166,  167,  170,  180,  184,  188,  192,  196,  198,  211,
      213,  214,  215,  216,  217,  219,  221,  234,  238,  239,
      240,  241,  244,  245,  246,  247,  248,  249,  250,  251,
      252,  253,  254,  255,  256,  257,  258,  261,  266,  268,
      270,  274
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "cool.flex"
/*
%%
 *  The scanner definition for COOL.
 */
/*
 *  Stuff enclosed in %{ %} in the first section is copied verbatim to the
 *  output, so headers and global definitions are placed here to be visible
 * to the code in the file.  Don't remove anything that was here initially
 */
#line 12 "cool.flex"
#include <cool-parse.h>
#include <stringtab.h>
#include <utilities.h>
#include <math.h>
/* The compiler assumes these identifiers. */
#define yylval cool_yylval
#define yylex  cool_yylex

/* Max size of string constants */
#define MAX_STR_CONST 1025
#define YY_NO_UNPUT   /* keep g++ happy */

extern FILE *fin; /* we read from this file */

/* define YY_INPUT so we read from the FILE fin:
 * This change makes it possible to use this scanner in
 * the Cool compiler.
 */
#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread( (char*)buf, sizeof(char), max_size, fin)) < 0) \
		YY_FATAL_ERROR( "read() in flex scanner failed");

char string_buf[MAX_STR_CONST]; /* to assemble string constants */
char *string_buf_ptr;

extern int curr_lineno;
extern int verbose_flag;

extern YYSTYPE cool_yylval;

/*
 *  Add Your own definitions here
 */




/*
 * Define names for regular expressions here.
 */
#line 958 "cool-lex.cc"

#define INITIAL 0
#define str 1
#define comment 2
#define line_comment 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals (void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

/* %not-for-header */

    static void yyunput (int c,char *buf_ptr  );
    
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 113 "cool.flex"

 /*
  *  Nested comments
  */

#line 1214 "cool-lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 352 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1010 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 73 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 73 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 74 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 118 "cool.flex"
BEGIN(line_comment);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 119 "cool.flex"
/* eat up anything thats not a newline */
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 120 "cool.flex"
{ curr_lineno++;
                          BEGIN(INITIAL);
                        }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 126 "cool.flex"
BEGIN(comment);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 127 "cool.flex"
/* eat anything that's not a '*' */
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 128 "cool.flex"
/* eat up new open comment */
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 129 "cool.flex"
/* eat up '*'s not followed by ')'s */
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 130 "cool.flex"
curr_lineno++;    
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 131 "cool.flex"
BEGIN(INITIAL);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 132 "cool.flex"

	YY_BREAK
case 11:
YY_RULE_SETUP
#line 134 "cool.flex"
{ cool_yylval.error_msg = "Unmatched *)";
                          return (ERROR);
                        }
	YY_BREAK
/*
  *  The multiple-character operators.
  */
case 12:
YY_RULE_SETUP
#line 143 "cool.flex"
{ return (DARROW); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 144 "cool.flex"
{ return (ASSIGN); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 145 "cool.flex"
{ return (LE); }
	YY_BREAK
/*
  * Keywords are case-insensitive except for the values true and false,
  * which must begin with a lower-case letter.
  */
case 15:
YY_RULE_SETUP
#line 150 "cool.flex"
{ return (CLASS); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 151 "cool.flex"
{ return (ELSE); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 152 "cool.flex"
{ return (FI); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 153 "cool.flex"
{ return (IF); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 154 "cool.flex"
{ return (IN); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 155 "cool.flex"
{ return (INHERITS); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 156 "cool.flex"
{ return (LET); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 157 "cool.flex"
{ return (LOOP); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 158 "cool.flex"
{ return (POOL); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 159 "cool.flex"
{ return (THEN); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 160 "cool.flex"
{ return (WHILE); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 161 "cool.flex"
{ return (CASE); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 162 "cool.flex"
{ return (ESAC); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 163 "cool.flex"
{ return (OF); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 164 "cool.flex"
{ return (NEW); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 165 "cool.flex"
{ return (ISVOID); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 166 "cool.flex"
{ return (NOT); } 
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 167 "cool.flex"
{ cool_yylval.boolean = true;
                  return (BOOL_CONST);
                }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 170 "cool.flex"
{ cool_yylval.boolean = false;
                  return (BOOL_CONST);
                }
	YY_BREAK
/*
  *  String constants (C syntax)
  *  Escape sequence \c is accepted for all characters c. Except for 
  *  \n \t \b \f, the result is c.
  *
  */
case 34:
YY_RULE_SETUP
#line 180 "cool.flex"
{ cool_yylval.symbol = inttable.add_string(yytext);
                  return (TYPEID);
                }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 184 "cool.flex"
{ cool_yylval.symbol = inttable.add_string(yytext);
                  return (OBJECTID);
                }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 188 "cool.flex"
{ string_buf_ptr = string_buf;
                  BEGIN(str);
                }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 192 "cool.flex"
{ BEGIN(INITIAL);
                  *string_buf_ptr = '\0';
                }
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 196 "cool.flex"
{ return (ERROR); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 198 "cool.flex"
{
                    int result;
     
                    (void) sscanf( yytext + 1, "%o", &result );
                           
                    if ( result > 0xff ) {
                        cool_yylval.error_msg = "Unescaped chars";
                        return (ERROR);
                    }
                    
                    *string_buf_ptr++ = result;
                  }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 211 "cool.flex"
{ return (ERROR); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 213 "cool.flex"
*string_buf_ptr++ = '\n';
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 214 "cool.flex"
*string_buf_ptr++ = '\t';
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 215 "cool.flex"
*string_buf_ptr++ = '\r';
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 216 "cool.flex"
*string_buf_ptr++ = '\b';
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 217 "cool.flex"
*string_buf_ptr++ = '\f';
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 219 "cool.flex"
*string_buf_ptr++ = yytext[1];
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 221 "cool.flex"
{
                   char *yptr = yytext;
                         
                   while ( *yptr ) {
                           *string_buf_ptr++ = *yptr++;
                   }
                   
                   cool_yylval.symbol = inttable.add_string(yytext); 
                   return (STR_CONST);
                }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 234 "cool.flex"
{ cool_yylval.symbol = inttable.add_string(yytext); 
                  return (INT_CONST); 
                }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 238 "cool.flex"
{ return(43); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 239 "cool.flex"
{ return(45); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 240 "cool.flex"
{ return(42); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 241 "cool.flex"
{ return(47); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 244 "cool.flex"
{ return(59); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 245 "cool.flex"
{ return(40); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 246 "cool.flex"
{ return(41); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 247 "cool.flex"
{ return(123);}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 248 "cool.flex"
{ return(125);}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 249 "cool.flex"
{ return(91); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 250 "cool.flex"
{ return(93); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 251 "cool.flex"
{ return(58); }         
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 252 "cool.flex"
{ return(46); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 253 "cool.flex"
{ return(62); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 254 "cool.flex"
{ return(60); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 255 "cool.flex"
{ return(44); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 256 "cool.flex"
{ return(126);}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 257 "cool.flex"
{ return(64); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 258 "cool.flex"
{ return(61); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 261 "cool.flex"
{ cool_yylval.error_msg = "_";
                       return(ERROR);
                     }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 266 "cool.flex"

	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 268 "cool.flex"
{ curr_lineno++; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 270 "cool.flex"
{ cool_yylval.error_msg = "Null char present.";
                  return(ERROR);
                }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 274 "cool.flex"
{ cool_yylval.error_msg = yytext;
                  return(ERROR);
                }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 277 "cool.flex"
ECHO;
	YY_BREAK
#line 1755 "cool-lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(str):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(line_comment):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 66);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 352 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 66;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 352 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 351);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

    static void yyunput (int c, register char * yy_bp )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* %if-c-only */

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 277 "cool.flex"
